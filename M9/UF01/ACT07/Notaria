/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Act7;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import static java.nio.charset.StandardCharsets.UTF_8;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

/**
 *
 * @author Raul
 */
public class Notaria {
    public static void main(String[] args) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException{
        
     //Recuperar clauPublica
       PublicKey pk = null;
       String mensaje;
       byte[] pkBytes;
       byte[] mensajeBytes;
       byte[] firma;
       boolean check;
       
       try{
        pkBytes = Files.readAllBytes(Paths.get("C:\\Users\\Raul\\Documents\\NetBeansProjects\\m9\\src\\Act7\\clavePublica.txt"));
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        mensaje = new String(pkBytes);
        byte[] publicKeyDecoded = Base64.getDecoder().decode(mensaje);
        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyDecoded);
        pk = keyFactory.generatePublic(publicKeySpec);
        mensajeBytes = Files.readAllBytes(Paths.get("C:\\Users\\Raul\\Documents\\NetBeansProjects\\m9\\src\\Act7\\mensaje.txt"));
        firma = Files.readAllBytes(Paths.get("C:\\Users\\Raul\\Documents\\NetBeansProjects\\m9\\src\\Act7\\firma.txt"));
        
        check = validateSignature(mensajeBytes,firma,pk);
        
        if(check==true){
            System.out.println("Comprovant signatura de l’arxiu missatge...OK");
        }
          if(check==false){
            System.out.println("Comprovant signatura de l’arxiu missatge... Error");
        }
       

         }catch(IOException ex) {
            System.out.println("Error no s'obte firma,clau o missatge");
            }
    
    }

    
public static boolean validateSignature(byte[] mensajeBytes, byte[] firma, PublicKey pk)
{
 boolean validate = false;
    try {
        Signature signer = Signature.getInstance("SHA1withRSA");
        signer.initVerify(pk);
        signer.update(mensajeBytes);
        validate = signer.verify(firma);
        } catch (Exception ex) {
        System.err.println("Error validant: " + ex);
       }
        return validate;
       }
}
